<UserControl x:Class="InstagramTextBoxWithPlaceHolder.Views.TextBoxWithPlaceHolder"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/906" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/908" 
             xmlns:local="clr-namespace:InstagramTextBoxWithPlaceHolder.Views" xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             MinWidth="270"
             MaxWidth="270"
             Width="270"
             MinHeight="40"
             MaxHeight="40"
             Height="40">
    <UserControl.Resources>
        <Style x:Key="credentialTxTtitleStyle" TargetType="{x:Type TextBlock}">
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Foreground" Value="{StaticResource PlaceHolderTboxTextColor}"/>
            <Setter Property="FontSize" Value="11"/>

            <!--Since we want to reuse this control we will use property binding for our placeholder-->
            <Setter Property="Text" Value="{Binding PlaceHolder}"/>
            <Setter Property="Padding" Value="2,0"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Text, ElementName=text}" Value="">

                    <!--Default Position and fontsize of Title-->
                    <DataTrigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard SpeedRatio="10">
                                <DoubleAnimation Storyboard.TargetProperty="FontSize" To="11"/>
                                <ThicknessAnimation Storyboard.TargetProperty="Margin" To="6 0 5 0"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </DataTrigger.EnterActions>

                    <!--Position and FontSize of Title when Text Textbox has value-->
                    <DataTrigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard SpeedRatio="10">
                                <DoubleAnimation Storyboard.TargetProperty="FontSize" To="10"/>
                                <ThicknessAnimation Storyboard.TargetProperty="Margin" To="6 -3 5 15"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </DataTrigger.ExitActions>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="credentialsTxTStyle" TargetType="{x:Type TextBox}">
            <!--same goes for text-->
            <Setter Property="Text" Value="{Binding Text, Mode=TwoWay}"/>
            <Setter Property="TextAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>

            <!--We also need to move our text some point below and also increase font size-->
            <Style.Triggers>

                <!--So, to know when to trigger wwe will first check what is the font size of our title-->
                <!--if it is 15pt then it means the title in above-->
                <DataTrigger Binding="{Binding FontSize, ElementName=title}" Value="11">

                    <!--Default Position and fontsize of Title-->
                    <DataTrigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard SpeedRatio="10">
                                <DoubleAnimation Storyboard.TargetProperty="FontSize" To="11"/>
                                <ThicknessAnimation Storyboard.TargetProperty="Margin" To="6 0 5 0"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </DataTrigger.EnterActions>

                    <!--Position and FontSize of Title when Text Textbox has value-->
                    <DataTrigger.ExitActions>       
                        <BeginStoryboard>
                            <Storyboard SpeedRatio="10">
                                <DoubleAnimation Storyboard.TargetProperty="FontSize" To="12"/>
                                <ThicknessAnimation Storyboard.TargetProperty="Margin" To="6 12 5 0"/>
                                <!--<DoubleAnimation Storyboard.TargetProperty="Height" From="20" To="40"/>-->
                                
                            </Storyboard>
                        </BeginStoryboard>
                    </DataTrigger.ExitActions>
                </DataTrigger>

                <!--get password inside the textbox if the textbox text is empty-->
                <DataTrigger Binding="{Binding Text, Mode=TwoWay}" Value="">
                    <Setter Property="Text" Value="{Binding Password, ElementName=passbox}"/>
                </DataTrigger>

                <!--if password box is visible then hide textbox-->
                <DataTrigger Binding="{Binding Visibility, ElementName=passbox}" Value="Visible">
                    <Setter Property="Visibility" Value="Collapsed"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type PasswordBox}">
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>

            <!--We also need to move our text some point below and also increase font size-->
            <Style.Triggers>

                <!--So, to know when to trigger wwe will first check what is the font size of our title-->
                <!--if it is 15pt then it means the title in above-->
                <DataTrigger Binding="{Binding FontSize, ElementName=title}" Value="11">

                    <!--Default Position and fontsize of Title-->
                    <DataTrigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard SpeedRatio="10">
                                <DoubleAnimation Storyboard.TargetProperty="FontSize" To="11"/>
                                <ThicknessAnimation Storyboard.TargetProperty="Margin" To="5 0 35 0"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </DataTrigger.EnterActions>

                    <!--Position and FontSize of Title when Text Textbox has value-->
                    <DataTrigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard SpeedRatio="10">
                                <DoubleAnimation Storyboard.TargetProperty="FontSize" To="12"/>
                                <ThicknessAnimation Storyboard.TargetProperty="Margin" To="5 12 35 0"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </DataTrigger.ExitActions>
                </DataTrigger>

                <!--hide password if the IsPassword = false;-->
                <DataTrigger Binding="{Binding IsPassword}" Value="False">
                    <Setter Property="Visibility" Value="Collapsed"/>
                    <Setter Property="Margin" Value="5 0 35 0"/>
                </DataTrigger>

                <!--also hide when the Show password Button is pressed-->
                <DataTrigger Binding="{Binding IsPressed, ElementName=showPass}" Value="True">
                    <Setter Property="Visibility" Value="Collapsed"/>
                    <Setter Property="Margin" Value="5 0 35 0"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        
        <Style TargetType="{x:Type Button}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <Path 
                                Width="20"
                                Margin="0,0,10,0"
                                Stretch="Uniform"
                                Fill="{TemplateBinding Foreground}"
                                Data="{StaticResource showPass}"/>
                        </Border>
                        <ControlTemplate.Triggers>

                            <!--Hide button if not IsPassword-->
                            <DataTrigger Binding="{Binding IsPassword}" Value="false">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <Border 
        CornerRadius="2"
        BorderThickness="1"
        BorderBrush="{StaticResource PlaceHolderTboxBorderBrush}"
        Background="{StaticResource PlaceHolderTboxBackgroundColor}"
        Height="40">
        
        <!--Border Shadow Effect-->
        <Grid>
            <!--Title-->
            <TextBlock 
            x:Name="title"
            Style="{StaticResource credentialTxTtitleStyle}"/>

            <!--Textbox-->
            <TextBox 
                Margin="5,0,35,0"
                x:Name="text"
                Text="{Binding Text,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"
                Style="{StaticResource credentialsTxTStyle}"/>

            <!--To detect if our textbox is password box or not we will use a bool-->

            <!--if we want to use this textbox as password box then..-->
            <!--To update textbox on password change-->
            <PasswordBox x:Name="passbox" Margin="0,0,35,0" Width="236">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="PasswordChanged" >
                        <i:InvokeCommandAction Command="{Binding PasswordChangedCommand}"  CommandParameter="{Binding ElementName=passbox,  Mode=OneWay}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </PasswordBox>

            <!--and button to toggle show/hide password-->
            <Button
                x:Name="showPass"
                Background="Transparent"
                BorderThickness="0"
                HorizontalAlignment="Right"
                VerticalAlignment="Center"/>
        </Grid>
    </Border>
</UserControl>